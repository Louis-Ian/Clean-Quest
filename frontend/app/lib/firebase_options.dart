// File generated by FlutterFire CLI.
// ignore_for_file: type=lint
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart' show defaultTargetPlatform, kIsWeb, TargetPlatform;
import 'package:flutter_dotenv/flutter_dotenv.dart' show dotenv;

class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        return macos;
      case TargetPlatform.windows:
        return windows;
      case TargetPlatform.linux:
        throw UnsupportedError(
          'FirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError('FirebaseOptions are not supported for this platform.');
    }
  }

  static FirebaseOptions get web => FirebaseOptions(
    apiKey: dotenv.get('FIREBASE_API_KEY'),
    appId: dotenv.get('FIREBASE_APP_ID'),
    messagingSenderId: dotenv.get('FIREBASE_MESSAGING_SENDER_ID'),
    projectId: dotenv.get('FIREBASE_PROJECT_ID'),
    authDomain: dotenv.get('FIREBASE_AUTH_DOMAIN'),
    storageBucket: dotenv.get('FIREBASE_STORAGE_BUCKET'),
  );

  static FirebaseOptions get android => FirebaseOptions(
    apiKey: dotenv.get('FIREBASE_ANDROID_API_KEY'),
    appId: dotenv.get('FIREBASE_ANDROID_APP_ID'),
    messagingSenderId: dotenv.get('FIREBASE_ANDROID_MESSAGING_SENDER_ID'),
    projectId: dotenv.get('FIREBASE_ANDROID_PROJECT_ID'),
    storageBucket: dotenv.get('FIREBASE_ANDROID_STORAGE_BUCKET'),
  );

  static FirebaseOptions get ios => FirebaseOptions(
    apiKey: dotenv.get('FIREBASE_IOS_API_KEY'),
    appId: dotenv.get('FIREBASE_IOS_APP_ID'),
    messagingSenderId: dotenv.get('FIREBASE_IOS_MESSAGING_SENDER_ID'),
    projectId: dotenv.get('FIREBASE_IOS_PROJECT_ID'),
    storageBucket: dotenv.get('FIREBASE_IOS_STORAGE_BUCKET'),
  );

  static FirebaseOptions get macos => FirebaseOptions(
    apiKey: dotenv.get('FIREBASE_MACOS_API_KEY'),
    appId: dotenv.get('FIREBASE_MACOS_APP_ID'),
    messagingSenderId: dotenv.get('FIREBASE_MACOS_MESSAGING_SENDER_ID'),
    projectId: dotenv.get('FIREBASE_MACOS_PROJECT_ID'),
    storageBucket: dotenv.get('FIREBASE_MACOS_STORAGE_BUCKET'),
  );

  static FirebaseOptions get windows => FirebaseOptions(
    apiKey: dotenv.get('FIREBASE_WINDOWS_API_KEY'),
    appId: dotenv.get('FIREBASE_WINDOWS_APP_ID'),
    messagingSenderId: dotenv.get('FIREBASE_WINDOWS_MESSAGING_SENDER_ID'),
    projectId: dotenv.get('FIREBASE_WINDOWS_PROJECT_ID'),
    authDomain: dotenv.get('FIREBASE_WINDOWS_AUTH_DOMAIN'),
    storageBucket: dotenv.get('FIREBASE_WINDOWS_STORAGE_BUCKET'),
  );
}
